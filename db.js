const Sequelize = require("sequelize");
const path = require("path");

const args = process.argv.slice(2);
const collecion = args[0] ? "-" + args[0] : "";

function createModel(collecion) {
  const mergedDatabse = path.resolve("./data/", `dataset${collecion}.db`);
  const eventsDatabse = path.resolve("./data/", `events${collecion}.db`);
  console.log({
    mergedDatabse,
    eventsDatabse,
  });
  const sequelize = new Sequelize("main", null, null, {
    dialect: "sqlite",
    storage: mergedDatabse,
    logging: false,
  });

  const eventSequelize = new Sequelize("main", null, null, {
    dialect: "sqlite",
    storage: eventsDatabse,
    logging: false,
  });

  const Asset = sequelize.define(
    "asset",
    {
      id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true,
      },
      collection: Sequelize.STRING,
      asset_contract: Sequelize.STRING,
      token_id: Sequelize.STRING,
      num_sales: Sequelize.INTEGER,
      image_url: Sequelize.STRING,
      name: Sequelize.STRING,
      permalink: Sequelize.STRING,
      owner: Sequelize.STRING,
      fetched: Sequelize.TINYINT,
      traits: Sequelize.STRING,
    },
    {
      indexes: [
        {
          fields: ["collection", "token_id", "num_sales", "fetched"],
        },
      ],
    }
  );

  const Event = eventSequelize.define(
    "event",
    {
      id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true,
      },
      token_id: Sequelize.STRING,
      collection_slug: Sequelize.STRING,
      timestamp: Sequelize.DATE,
      event_type: Sequelize.STRING,
      from_account: Sequelize.STRING,
      to_account: Sequelize.STRING,
      transaction: Sequelize.STRING,
      transaction_from_account: Sequelize.STRING,
      transaction_to_account: Sequelize.STRING,
      payment_token: Sequelize.STRING,
      seller: Sequelize.STRING,
      owner: Sequelize.STRING,
      winner_account: Sequelize.STRING,
      price: Sequelize.STRING,
    },
    {
      indexes: [
        {
          fields: ["event_type", "collection_slug", "timestamp"],
        },
      ],
    }
  );

  return {
    sequelize,
    Asset,
    Event,
  };
}

const { sequelize, Asset, Event } = createModel(collecion);

module.exports = {
  createModel,
  sequelize,
  Asset,
  Event,
};
